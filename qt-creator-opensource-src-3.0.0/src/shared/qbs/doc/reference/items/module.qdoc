/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the Qt Build Suite.
**
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
****************************************************************************/
/*!
    \contentspage list-of-items.html
    \previouspage group-item.html
    \page module-item.html
    \nextpage probe-item.html
    \ingroup list-of-items

    \title Module Item
    \brief Represents a collection of properties and items that can be loaded into a product.

    A \c Module item is a collection of properties and language items that are used for building a
    product if the product depends on (or loads) the module.

    A Module can be loaded by adding a dependency to it in a product.
    For example, the following product will load the \c cpp module:
    \code
    Product {
        Depends { name: "cpp" }
        ...
    }
    \endcode

    \table
        \header
            \li Property
            \li Type
            \li Default
            \li Description
        \row
            \li setupBuildEnvironment
            \li script
            \li \c undefined
            \li Script for setting up the environment in which the project is built.
            Use the \c putenv and \c getenv functions to alter the environment.
            The return value of this script is ignored.
        \row
            \li setupRunEnvironment
            \li script
            \li \c setupBuildEnvironment
            \li Script for setting up the environment in which the project is run.
        \row
            \li validate
            \li script
            \li \c undefined
            \li Script that is run after the module is loaded. It can be used to check property
            values and throw errors in unexpected cases. The return value is ignored.
    \endtable
*/
